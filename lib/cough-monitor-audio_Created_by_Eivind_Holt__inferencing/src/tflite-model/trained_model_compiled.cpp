/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.05.2022 22:23:30

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 7904;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteEvalTensor tflEvalTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,2600 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 40, 65, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 40, 1, 16, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 20, 16, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 20, 1, 32, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 10, 32, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 10, 1, 64, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data7[2] = { -1, 320, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data8[16*1*3*65] = { 
  /* [0][0][][] */ -98,-93,-8,-10,0,-49,-42,-50,-37,-47,-60,-28,47,-79,-32,-81,-85,-1,-120,-50,18,-22,-46,15,2,1,-79,-28,-26,-1,-45,17,-25,-73,-21,-68,17,-49,-44,-84,-45,-26,16,16,-66,-65,-55,-41,-73,-59,-8,-24,-17,-102,-47,-87,1,-64,12,15,-69,26,-1,-96,-81, -65,-34,-79,-34,-29,-15,-62,-6,41,30,25,-7,-18,-11,-8,-1,18,71,-48,-12,1,8,-36,62,40,13,79,23,-27,76,80,78,53,95,103,45,24,8,82,-31,9,39,41,42,44,16,56,30,77,91,41,116,11,19,26,34,91,80,85,15,-26,127,88,63,107, -4,-16,10,-33,-53,-31,10,-36,-24,16,-34,-65,-52,39,21,42,-44,24,36,43,62,-1,-18,69,-8,68,35,47,-45,-43,75,-45,37,20,10,-21,-33,22,37,-22,-9,-43,67,24,25,54,32,-24,-2,54,-5,45,-13,45,46,25,13,102,70,36,-12,-28,38,22,-30, 
  /* [1][0][][] */ -26,-77,-38,6,6,54,97,39,53,79,-16,1,112,87,4,15,9,-48,0,-18,-67,-11,-34,60,96,3,-44,-3,-10,-3,46,87,76,-17,-35,-60,17,-30,-70,62,-84,-7,14,-33,22,-50,47,-70,-20,-33,-70,-64,-14,11,22,-68,62,-35,21,34,-44,-60,8,-68,17, -98,-84,-78,40,62,-26,29,115,100,50,112,103,25,123,63,4,60,15,58,-10,3,-34,85,25,28,23,-34,61,37,-14,-27,-14,26,30,27,59,36,-42,-44,15,-40,92,45,-4,-1,-26,-48,86,-43,43,-63,-15,-21,-44,-8,-3,40,34,-12,18,-37,1,-29,-8,60, -80,-47,-107,-80,-32,2,21,127,15,99,100,114,55,15,14,-44,0,-101,-75,-97,0,-36,15,-25,97,65,3,71,28,19,64,31,5,90,48,-67,76,54,-52,-48,33,-1,15,71,29,32,83,-54,-41,-30,-58,46,5,-13,-26,33,-7,-8,74,49,-60,7,-74,-37,-6, 
  /* [2][0][][] */ -38,-85,-125,-57,16,73,115,50,97,63,27,52,22,63,-34,-27,55,-55,-15,-17,-104,-61,-21,-40,-24,66,66,34,12,-35,-19,-36,26,-44,16,-28,-9,-4,24,-34,-52,51,43,39,-68,-3,4,-21,-67,-22,53,-16,-97,42,-38,-25,64,-31,-28,29,61,-22,-44,27,30, -12,-80,-9,54,82,127,88,92,26,85,104,80,89,107,46,50,43,-24,50,-54,-3,-79,-44,-35,106,-6,20,14,32,-1,-45,-14,-26,46,7,6,-71,-90,-79,17,41,-48,63,62,46,-78,-35,-33,44,-33,-77,23,-49,0,14,69,5,-9,84,50,-96,-97,-93,-13,46, 5,-100,-118,100,-19,45,94,127,76,95,78,102,70,12,87,43,26,-44,28,-56,27,-21,-31,71,4,-47,75,-22,-43,9,-36,-28,89,-35,-51,-37,-52,14,38,61,-36,-23,42,39,-7,-10,37,8,-30,-36,45,107,1,-30,51,-38,-50,-10,44,-16,-80,-37,-8,-50,40, 
  /* [3][0][][] */ -60,25,117,32,0,39,25,61,18,-85,-11,48,54,-4,-37,34,24,22,-7,35,24,61,46,29,-12,-96,-58,-59,-12,-69,-53,41,-35,-55,-19,27,-110,-30,-44,45,-15,39,5,-1,-27,-24,18,6,13,-21,-35,-91,-109,-119,-87,-93,-60,-2,-116,32,-13,-37,68,-43,28, -32,11,81,96,28,58,74,-39,-86,-49,-88,4,-52,25,17,-69,-41,70,58,-14,-32,52,-3,-44,19,-8,-54,-73,-74,-11,-111,9,-67,-76,35,-3,-34,34,-15,-32,15,-105,-96,24,-102,15,-111,37,-41,-98,-74,-29,-98,-127,-102,-96,-27,-69,-81,-3,-54,11,-69,28,-11, -9,77,94,-16,59,53,38,12,23,24,-16,76,47,15,34,13,-10,115,-22,80,88,19,95,34,-57,-9,27,-32,-32,-50,-83,46,-46,50,-86,48,-31,-25,-34,-75,52,-38,-13,25,11,2,-61,-24,9,-49,-71,5,-24,-63,-74,3,-115,-97,-14,-93,-8,-84,-42,-16,-22, 
  /* [4][0][][] */ -48,-101,24,0,-72,7,-4,17,55,3,43,29,64,52,115,3,84,-83,43,-42,-33,-52,40,-46,31,38,-29,-5,124,21,27,-30,81,-14,53,88,-37,92,99,57,-23,114,79,-42,73,78,75,16,-8,64,35,114,116,72,108,-11,82,100,127,106,55,48,16,21,-6, -24,6,-42,48,-3,24,-34,-10,42,33,-42,-5,-10,48,92,89,0,-37,37,-19,-17,-97,72,-16,-34,32,67,25,-17,125,90,76,69,9,11,7,36,94,93,-19,68,39,78,-36,74,0,82,13,96,55,59,77,87,53,39,-8,50,110,-21,-10,-19,-43,63,-25,-52, -11,-101,-33,-16,-80,-44,22,9,-15,-3,-10,11,-52,32,-4,97,23,36,46,35,-87,10,-80,6,-27,82,-21,31,89,20,37,-31,-21,47,-42,13,-22,63,101,-37,-83,91,-17,67,-10,47,6,66,108,-3,-4,119,28,-33,93,100,57,40,97,91,42,48,-58,20,25, 
  /* [5][0][][] */ 68,84,72,-1,14,-10,48,-58,4,-54,-37,2,-33,10,-40,56,-17,22,33,20,17,2,-4,13,-107,-84,-62,-69,-14,3,-88,-80,-63,22,-33,28,1,38,-51,2,-43,-26,-29,13,28,-69,8,-23,-1,15,-2,-29,42,0,15,-49,-104,19,-69,-42,-23,7,-26,-37,20, 9,22,125,63,-75,22,50,-43,-100,-18,-58,-18,-45,25,-85,30,-11,16,53,-3,60,46,17,22,-65,-59,-81,-102,34,-65,-21,-106,-51,-110,-70,-55,-53,-64,41,-8,61,-54,-51,17,-81,-82,-89,-106,-49,-8,-74,-90,15,-18,-53,-20,7,-101,-18,-76,-40,54,95,-20,-66, 78,127,52,67,-22,-14,-22,-34,34,-9,22,-25,-5,-19,-24,-16,-34,6,-39,101,8,38,52,-30,-89,16,-88,-75,-52,-51,-85,-63,-65,-56,40,-38,-1,43,-31,24,-35,5,-1,-25,-10,-50,-6,-97,-52,-6,19,-29,2,-74,-35,-42,-25,-26,-28,-76,-59,76,-12,-23,-44, 
  /* [6][0][][] */ -24,-34,-14,82,29,33,56,70,86,48,31,79,55,45,119,12,22,56,55,-30,-7,9,10,-24,63,74,29,9,18,-10,-10,76,-69,-69,-19,4,-43,-12,59,37,-59,43,19,49,15,39,4,-16,12,29,26,16,-20,64,50,29,84,38,35,60,-16,-43,-5,-69,-17, 4,-55,-59,19,-13,-9,23,31,37,46,28,-42,-16,-22,-57,-69,-76,-41,-54,-91,-85,-32,-5,-20,-82,-13,8,-89,-41,-9,-20,-63,-47,-71,-12,-40,-59,-59,-90,-80,6,80,2,0,26,35,-2,-39,-10,-51,4,-18,-46,21,-22,26,43,-7,9,-16,-37,-60,-85,-117,13, -24,1,-9,-29,44,-58,-37,24,-20,10,18,-5,42,-46,-69,-95,-93,-39,-81,-127,-42,-27,-65,-35,-39,-87,-21,-88,-24,-12,-7,-53,-8,-60,-52,-57,-33,-86,-32,27,4,44,78,85,6,27,-6,-38,-17,-103,60,-61,-22,-2,-14,50,27,2,-19,-29,-8,-61,-45,-27,29, 
  /* [7][0][][] */ -55,-59,-16,-26,34,-6,49,43,-6,69,98,119,84,31,114,-47,-2,-66,46,-26,-37,-59,-82,40,53,-24,-35,58,-5,29,-4,84,72,24,37,17,2,-85,-57,47,-50,-45,49,42,-83,-66,-24,-48,-12,-47,-5,-13,-65,29,-92,-80,-21,-40,-112,-25,-25,-34,-127,-53,-1, -76,5,-85,-6,-33,39,39,20,46,87,26,5,-25,-24,9,-58,-27,10,-70,-80,-15,-39,-51,34,-20,-31,-52,-41,-48,39,6,42,11,-45,-7,46,-51,59,16,50,-53,47,76,-42,47,-81,-36,32,-96,47,-74,39,-56,22,-71,-89,-42,45,-12,-75,-86,-90,-31,-7,-23, -38,-22,-86,-32,41,79,-16,73,126,4,83,42,93,127,48,10,-5,20,50,-105,-39,-106,-20,31,81,-39,-37,76,6,-47,-23,-11,60,-57,31,-85,-1,21,-12,86,30,18,-2,45,-73,-58,37,-37,-60,-14,4,55,-67,-35,18,14,42,23,-71,-78,-36,-84,-79,-93,-7, 
  /* [8][0][][] */ -16,-15,-113,43,-28,77,94,-19,61,16,94,73,124,81,16,29,-20,5,-56,-104,-12,-56,51,-77,22,30,-10,127,-15,29,0,4,-37,-13,36,44,-26,-55,21,-12,-31,58,24,6,-64,-18,29,10,-60,100,12,-55,39,-52,79,-23,3,-32,62,-14,-82,-13,4,47,-13, -28,-107,-67,-47,68,-39,-33,28,55,75,37,68,-7,34,36,88,-2,7,-23,31,-35,-113,88,13,-15,72,51,9,26,111,65,51,16,58,18,-31,35,16,-1,-17,31,28,-23,22,-28,42,74,86,-59,57,-71,9,3,-42,50,-8,32,8,116,-66,56,-39,46,-81,6, -88,-46,-44,-92,-4,3,72,52,109,92,-16,116,25,84,116,66,65,-51,3,-90,-53,-29,49,-15,-8,92,117,120,-9,-7,84,67,119,122,-40,-29,32,73,80,-35,61,-48,18,-26,13,45,82,-52,-40,68,34,45,7,4,102,-17,-29,73,77,-26,14,-23,40,-70,14, 
  /* [9][0][][] */ -25,-81,-20,-121,49,-113,20,48,-3,-43,30,-107,35,-11,71,-70,-70,-76,-36,0,9,20,50,-78,60,40,-119,-104,38,-61,61,29,8,-94,-2,70,12,67,41,84,-23,75,-115,-111,31,-31,8,53,-105,-115,-93,11,1,-104,-51,8,47,7,45,-28,-53,-29,47,-66,-85, -88,-68,72,76,41,-101,-59,-40,21,-66,-80,-21,-78,50,-34,71,-24,14,-61,43,53,-100,-127,53,-108,-76,-121,32,28,-101,48,83,38,44,82,-25,3,-113,-65,-37,-123,78,-105,73,-79,9,-52,65,-12,41,39,1,-125,83,-31,-11,75,-123,37,48,-2,-29,-82,71,-124, -33,-81,-96,-40,-29,-98,-12,-66,59,-102,11,-32,56,35,-83,67,-65,-104,82,-79,20,-41,-5,21,-15,15,32,-121,-85,-14,-17,74,-12,-66,-22,70,-79,-48,69,-72,-76,6,-47,81,-84,11,-24,-29,64,-96,-66,74,-120,25,38,-18,-70,18,10,-51,-18,55,-50,-73,-13, 
  /* [10][0][][] */ -109,64,-118,55,-81,72,1,-127,-28,36,-11,31,-16,-114,-38,0,-96,38,-67,-39,-87,31,108,-109,-47,-44,-25,-36,-32,21,-47,2,28,96,-5,48,-49,-70,60,0,-99,-9,-72,46,-103,-38,83,-36,24,-36,-30,4,-4,31,-95,46,-4,75,-67,-104,-44,48,99,10,6, -113,-71,36,6,-82,-19,19,-1,-118,65,-84,-48,-100,80,-33,-88,-106,-33,-98,72,-90,-14,90,50,-17,-60,61,-36,95,30,-86,30,-79,59,-6,75,15,-77,-47,50,-75,-56,-10,3,56,47,8,-34,-57,107,33,83,105,21,-8,88,-75,51,-19,-56,-66,-11,67,-33,-34, -104,-106,-95,-74,-99,79,-37,-24,-44,32,-92,39,79,27,-50,-77,-103,-75,49,-91,45,-22,61,-74,37,42,21,-29,-101,-99,-40,-42,52,95,-34,-37,-20,54,-77,45,-14,-97,15,-70,-44,51,-61,12,83,38,-21,68,-100,28,2,-83,27,74,31,-99,-74,-25,-74,-73,-52, 
  /* [11][0][][] */ -9,61,-66,51,80,68,88,-5,62,11,86,-10,33,48,78,9,-29,13,50,-75,-9,-49,68,-7,59,37,-70,67,57,-57,30,-56,-16,-56,-15,-50,23,-23,-66,-62,-57,-56,-39,-11,-71,12,-34,-67,5,24,-64,-91,-61,25,-50,-94,29,-19,-61,27,-74,-74,5,-3,38, -1,46,-79,-3,76,109,111,114,73,0,32,82,18,41,-16,13,15,-54,42,-66,-2,-58,38,35,-7,4,68,-8,-91,56,-48,1,-50,-50,42,-67,28,-63,-68,-58,-6,14,63,-16,18,-61,43,-32,-61,-46,-1,-76,28,11,-26,-19,-91,8,49,-41,-113,-59,-108,14,-24, -18,-2,-37,39,47,99,35,84,33,79,-28,40,65,84,27,-9,52,-3,55,-59,24,44,61,49,108,78,67,-5,-37,20,-30,78,-19,-54,-10,14,-17,-59,33,-5,-39,0,-43,-32,-59,45,-25,-29,48,12,-42,16,24,-31,12,-1,59,2,35,-24,-89,-50,20,-127,-69, 
  /* [12][0][][] */ -11,-4,-90,21,54,124,91,4,16,47,38,-14,58,16,-58,-53,-52,-109,48,11,-13,-46,35,-52,-12,-45,-6,-18,-70,80,-51,73,86,14,9,59,-14,-11,-127,-10,-5,34,-18,-55,6,-71,0,-53,-24,55,-33,-44,-57,29,-52,-18,-17,23,15,13,-23,25,-15,61,104, -44,-74,13,35,57,103,73,93,77,10,-7,106,9,34,113,-19,42,-21,21,-4,22,-109,-31,-52,-14,44,81,27,55,-60,1,64,-28,19,50,-10,-42,13,31,-63,-61,-4,8,46,-74,-36,-29,-50,-86,32,-79,-32,38,-52,-75,-93,-85,50,57,32,-35,-10,-109,-67,1, -64,0,-99,-30,75,83,65,89,55,-4,38,18,18,40,-23,27,-102,-118,-45,23,-77,-40,-75,62,98,-24,-57,110,-44,65,-24,108,-12,-49,51,-43,20,37,-38,-68,23,18,95,44,43,21,-66,2,37,-32,3,58,-33,-71,58,44,-28,-76,42,-15,-40,-69,29,6,-41, 
  /* [13][0][][] */ -52,-48,-77,-50,-61,39,28,54,107,100,72,15,-15,22,68,61,-21,22,-41,-61,-99,42,52,18,88,-63,-33,7,-73,-43,-56,-54,34,36,69,53,31,36,53,18,27,-90,-40,25,-110,41,36,56,-48,3,-53,-43,17,-12,39,-77,-76,-103,-24,46,-28,-7,-57,45,76, -63,17,-90,-30,-30,54,7,113,10,-12,62,32,114,108,116,28,98,38,-68,-52,-106,19,-31,59,120,41,47,-13,31,127,52,100,62,-13,-58,24,-67,32,-107,-62,37,72,-1,88,-81,-67,20,59,2,-36,-38,-22,-27,66,-18,85,-63,-40,-42,41,-57,-10,-5,76,-1, -50,-99,-72,0,53,-59,110,49,68,100,95,-28,81,1,90,-25,-17,17,0,14,-75,-44,30,-25,109,-40,40,81,63,21,84,-27,11,-27,38,51,-98,79,63,74,-25,87,2,24,3,88,88,-28,14,24,9,39,-29,10,6,81,0,-6,-13,50,-95,4,-85,-17,-52, 
  /* [14][0][][] */ -74,-107,-61,5,61,46,-14,46,16,-20,29,71,-33,22,-10,-48,38,32,-75,24,-70,11,18,-77,2,26,21,78,7,80,43,37,-35,-34,-33,-48,-57,24,35,28,29,-22,-22,7,19,-11,-14,-14,-73,31,-14,9,-71,-39,-41,-60,21,12,-46,11,13,-114,-2,-31,-54, 3,-47,-127,9,-47,-4,63,35,83,59,-32,45,20,44,-45,-62,-50,-13,-14,14,-80,-65,-48,20,-13,78,-19,-10,14,-11,71,-49,52,-17,-28,43,58,-18,-9,-66,-34,58,-30,26,-14,-70,21,-44,22,64,47,12,-63,10,66,-47,-12,55,3,-2,-51,-48,13,-24,86, -84,-23,-29,47,-13,58,45,84,59,81,42,51,-20,33,56,36,13,-18,-59,5,-65,-52,-3,43,-21,11,40,74,-59,14,-32,-51,-41,-25,-68,-27,-69,21,-41,6,-52,25,17,32,57,31,-38,-65,-15,54,16,30,-25,-20,27,31,44,-27,-52,-68,-108,-80,-8,-24,84, 
  /* [15][0][][] */ 4,85,14,30,3,-44,36,-23,-30,-82,-38,21,7,-100,22,-9,2,22,1,72,54,78,29,50,-11,9,-19,-82,-2,-54,-22,-55,58,11,87,47,70,-42,62,-35,-25,-9,30,70,40,7,63,54,16,0,84,-6,58,54,33,-11,-13,55,-29,57,11,65,94,25,38, 81,122,89,-17,-8,-32,9,-59,-74,-57,4,-49,-2,9,-58,-6,71,62,-37,85,-15,78,-60,-8,-74,-15,47,1,-48,5,-31,6,44,40,67,27,-7,7,37,15,-7,-32,33,-31,58,25,-46,-50,-41,-10,-4,-82,-46,-52,41,-73,7,-46,-32,54,-16,15,-35,42,13, 55,99,70,-10,-8,13,-41,36,-77,-85,-95,-45,-37,12,-98,-30,79,-1,12,67,61,86,-48,-42,11,-31,-22,-59,48,-58,-64,19,-34,-44,36,-49,21,63,-11,-33,-29,23,24,27,-28,-58,-73,-65,-48,-53,-20,31,-9,-22,58,49,-60,-74,-13,-55,65,51,-6,-8,-127, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,65 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0023770795669406652, 0.0021498189307749271, 0.0020527227316051722, 0.0022597061470150948, 0.0019630391616374254, 0.0024374257773160934, 0.0035722851753234863, 0.0022238029632717371, 0.0019411285175010562, 0.0014864980475977063, 0.0014529546024277806, 0.002402409678325057, 0.0020819532219320536, 0.001933748135343194, 0.0023406513500958681, 0.0025058111641556025, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { 7673, -9751, -5780, 2664, -12993, 3243, -3253, 4595, -12473, -6435, -8049, -3490, -4594, -14443, -9412, 4213, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 9.3218814072315581e-06, 8.4306630014907569e-06, 8.0498939496465027e-06, 8.8615934146218933e-06, 7.6981932579656132e-06, 9.5585328381275758e-06, 1.4008962352818344e-05, 8.7207963588298298e-06, 7.6122692007629666e-06, 5.82940447202418e-06, 5.6978615248226561e-06, 9.4212145995697938e-06, 8.1645230238791555e-06, 7.5833263508684468e-06, 9.1790252554346807e-06, 9.8267109933658503e-06, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[32*1*3*16] = { 
  /* [0][0][][] */ -35,-44,-28,51,60,-56,127,23,46,41,33,47,64,-49,-28,-35, 21,53,-37,-50,-56,-80,-13,7,7,-67,32,-7,29,-41,-17,-95, -64,-87,-69,-8,-59,41,-9,-71,10,34,5,-80,1,6,-70,-50, 
  /* [1][0][][] */ -40,-39,52,57,-55,-62,-33,0,47,29,50,-25,94,8,60,-2, -31,90,43,-29,-27,56,-9,87,58,56,-51,-28,-6,-18,34,-59, -30,20,85,85,-16,17,127,76,61,-51,41,80,34,56,-31,-48, 
  /* [2][0][][] */ -64,-55,37,-48,30,-56,127,-28,-33,-20,0,41,57,77,53,-35, 42,-50,34,-28,-10,17,55,-65,-21,55,26,33,30,-32,6,-74, 17,35,-58,29,-77,-91,58,-74,21,-14,-67,-50,26,46,26,15, 
  /* [3][0][][] */ -35,8,-9,-27,-18,-3,127,76,5,28,-26,58,11,-22,38,-18, 64,69,-27,2,-21,-58,69,20,-70,33,-64,-67,-69,86,-60,53, 3,42,17,34,24,-90,-37,48,-26,58,66,-34,-44,18,47,-6, 
  /* [4][0][][] */ 17,91,51,-51,-127,4,-68,39,89,98,-62,-91,-43,-125,-85,-126, -85,2,76,-121,-36,-59,-114,-36,16,19,-114,-111,17,-117,-94,-63, -47,83,84,-41,-124,-62,54,-22,-45,61,72,70,-126,63,-8,-12, 
  /* [5][0][][] */ 127,-16,44,-24,50,-51,-4,-52,46,19,28,-43,-52,84,-51,12, -26,-22,-15,-10,-21,46,-46,9,-39,-2,-24,-67,-41,-21,2,80, -65,-5,-4,46,-40,77,-44,-44,-40,-39,-7,-1,-12,-23,-17,35, 
  /* [6][0][][] */ 44,7,5,-36,17,86,-27,-7,-71,-12,47,-5,28,-25,-113,70, 72,-93,-13,117,-98,31,-96,19,-20,12,43,-17,57,-81,-73,16, 3,-78,76,44,-118,127,-29,5,-78,-46,68,106,14,91,104,-38, 
  /* [7][0][][] */ -30,31,2,35,5,-35,127,48,-37,-16,20,6,17,-34,62,-13, -13,30,4,19,-1,-23,111,4,8,32,15,-25,-37,-17,-36,-32, 18,16,-21,-18,-35,22,-19,-10,-18,-22,23,-39,7,-36,12,-14, 
  /* [8][0][][] */ -55,52,-49,-8,-19,-92,127,44,1,25,-2,52,-43,-58,26,-13, 40,-7,25,-39,-43,-68,-86,24,-16,-58,-68,8,-46,-1,-61,-87, -34,-66,-66,-49,12,-14,-50,-35,26,28,-11,8,39,36,-58,15, 
  /* [9][0][][] */ -19,29,79,-61,-4,15,127,76,-49,62,22,38,-34,38,58,-64, 22,23,5,19,-20,-66,110,-49,7,25,-12,26,-40,-57,61,-32, 63,-53,22,1,-8,-4,49,-30,-11,45,39,16,43,45,-25,-100, 
  /* [10][0][][] */ 3,48,18,-28,50,-15,127,63,10,5,-25,63,36,42,-31,-66, 36,-5,17,-63,-48,-14,80,6,2,-28,1,7,25,48,-43,-37, 31,70,-10,-38,10,-8,1,-3,69,16,13,49,-13,64,44,-45, 
  /* [11][0][][] */ -8,0,21,67,-60,37,102,33,39,-107,76,91,-18,-56,1,-10, -53,98,2,34,30,-76,58,47,-100,-40,46,6,-63,-4,-19,-89, -41,78,118,68,60,-100,23,-55,54,69,-18,-89,-18,127,51,47, 
  /* [12][0][][] */ 59,-127,-2,35,-43,99,120,34,8,-32,-2,-15,-98,6,-7,-47, 98,88,33,-96,125,-121,53,-79,2,113,-27,-32,3,-6,-39,-64, -71,-37,-119,-91,108,42,-21,-74,47,-8,-72,-52,-89,-120,-38,73, 
  /* [13][0][][] */ -35,-85,-80,28,-72,75,-3,-79,-54,-68,-1,71,67,51,2,127, -80,10,-9,3,56,56,-59,78,2,-24,-50,103,52,-56,68,101, -121,18,52,35,-90,20,-12,8,-116,-50,57,-71,-40,30,35,62, 
  /* [14][0][][] */ 18,84,-43,-57,30,-118,101,18,-21,65,-22,27,-63,100,33,8, -45,79,-6,11,58,-127,-9,69,72,7,-35,1,62,106,71,-109, 66,118,94,1,-3,4,110,-29,90,-18,41,-65,27,50,1,-113, 
  /* [15][0][][] */ 47,-19,-16,-41,-38,-13,127,65,35,37,-25,-31,0,12,-43,-43, 7,-25,6,37,-6,1,1,73,-54,18,28,-49,73,68,35,-58, 53,-8,29,60,49,-21,120,6,-44,21,-5,59,88,-5,-23,-69, 
  /* [16][0][][] */ -62,53,-71,-9,-39,38,-88,-46,-83,45,58,17,-24,50,-39,113, -12,-13,-15,-49,4,49,2,26,-11,65,-66,75,28,-11,-43,-45, -12,0,45,127,47,71,31,40,-65,23,58,57,-36,-91,-41,31, 
  /* [17][0][][] */ 50,-40,-3,21,-40,-17,117,0,49,60,-21,17,-54,43,18,-10, 41,10,7,-31,-16,-33,-3,65,-6,49,2,-28,41,-5,-44,-13, 41,56,5,-9,32,-61,127,12,68,-23,-30,54,25,6,-43,-33, 
  /* [18][0][][] */ 53,-27,113,-103,-1,33,-26,79,-53,-92,7,15,80,110,89,-112, -6,12,-6,-12,-12,8,127,98,57,-49,64,-2,19,50,82,-102, 105,-22,-14,70,-83,-62,105,23,57,47,5,-89,-49,89,86,-53, 
  /* [19][0][][] */ 17,-18,44,80,-14,114,9,-31,-76,22,61,-34,-68,59,-24,127, 42,-10,-18,10,-33,59,-100,8,-83,67,73,-77,44,31,-29,22, -3,-104,33,76,-95,106,-64,-61,-88,76,67,-49,-7,-37,-55,120, 
  /* [20][0][][] */ 27,-4,-94,49,-14,-48,-104,80,-98,127,112,90,34,-19,-25,-111, -68,-112,36,-68,-125,77,-17,-61,-66,43,-16,-27,-6,26,-32,69, 52,-30,-54,-105,-33,-95,47,-63,-7,-59,12,-98,-6,27,-70,51, 
  /* [21][0][][] */ -44,41,105,77,-69,37,127,-29,-1,14,-1,78,92,29,-33,39, 8,-18,14,-52,103,2,64,82,-92,84,89,6,104,-30,92,-4, 5,80,104,9,-52,-38,-1,-31,42,76,-98,41,7,109,97,22, 
  /* [22][0][][] */ 18,67,47,34,2,-66,127,-47,51,-11,-32,-6,11,-30,17,-55, 12,58,29,-58,9,-42,29,-23,19,7,31,66,58,-4,74,-16, 34,56,45,42,50,-76,19,58,-3,-28,40,12,-47,-12,-27,-46, 
  /* [23][0][][] */ -109,-37,94,52,-127,47,12,-88,-107,-6,18,92,27,47,62,8, 37,41,-22,7,-90,109,22,-73,70,5,-96,89,30,83,-18,33, -39,-107,21,64,-77,-6,-68,-53,-41,-61,-65,92,-14,17,-80,65, 
  /* [24][0][][] */ -67,-50,-37,88,-31,127,-19,43,-92,-58,-46,31,-64,-47,-59,108, -52,-35,51,82,9,94,-60,19,-31,52,-57,29,58,-54,-17,-13, -7,-25,-31,5,-64,-10,8,73,-59,-21,-57,92,89,-22,-44,1, 
  /* [25][0][][] */ -42,9,74,-22,60,-86,116,-22,6,18,-29,25,42,71,10,-83, 48,40,89,-9,-18,-42,47,50,16,3,40,60,-9,-23,-3,9, -32,-19,61,-40,33,-90,127,-42,83,-14,-52,-12,57,74,52,-30, 
  /* [26][0][][] */ 31,-4,-69,11,36,41,-6,-72,28,-49,-5,-34,57,46,-27,53, -59,-2,-68,6,86,-26,-127,58,-22,64,11,20,-38,-3,-1,20, -6,-87,-117,-60,-38,62,-70,-26,-20,-35,23,-82,-53,-16,10,80, 
  /* [27][0][][] */ -30,70,-60,-39,127,6,-70,74,65,55,-81,-6,11,59,67,113, -81,-8,-56,-106,-16,-4,-33,-18,-93,57,16,-111,-47,-42,-77,40, -16,-9,-54,-72,7,-62,-101,-29,-75,-26,-31,-59,23,42,47,70, 
  /* [28][0][][] */ 3,-7,66,-61,-5,-30,-53,35,24,-21,26,42,44,29,55,-25, 9,-37,47,8,8,-27,5,56,-24,18,-2,57,-22,19,-5,-77, 47,58,-8,-25,18,-31,127,-15,37,23,54,-47,22,34,60,-55, 
  /* [29][0][][] */ 42,58,-62,-8,-4,32,-4,-41,-39,50,26,-9,-2,12,11,87, 17,-64,38,42,-47,2,-81,19,17,-8,26,10,-25,-32,-8,0, -42,-41,17,68,-71,127,-12,9,-100,-13,-64,16,2,-19,15,122, 
  /* [30][0][][] */ 17,13,30,-56,32,34,-14,-36,48,-49,39,-14,-7,-32,-29,33, 37,-36,-69,42,49,73,-127,-18,4,41,-49,24,36,-34,-56,95, -26,-57,-24,-25,-5,68,-86,-23,-73,48,4,11,7,-18,-3,11, 
  /* [31][0][][] */ 30,65,-33,-11,20,-74,88,24,-37,-47,15,36,23,-47,-22,-51, 19,-23,90,96,-50,-38,52,65,-19,24,-9,51,77,-16,29,-63, 1,28,104,69,-66,-28,127,107,63,37,20,59,13,3,-43,-6, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant10_scale = { 32, { 0.0028165322728455067, 0.002794724190607667, 0.0024620364420115948, 0.0028501623310148716, 0.0016878676833584905, 0.0044901310466229916, 0.0022112173028290272, 0.0051961774006485939, 0.0029911762103438377, 0.0030891888309270144, 0.0036385385319590569, 0.0020492421463131905, 0.0020297227893024683, 0.0022345709148794413, 0.0022935590241104364, 0.0031018168665468693, 0.0023684331681579351, 0.0035246175248175859, 0.0021558990702033043, 0.0026127197779715061, 0.001711251912638545, 0.0022323729936033487, 0.0035322317853569984, 0.0021313645411282778, 0.0026409230194985867, 0.0032356611918658018, 0.0030143971089273691, 0.0023261751048266888, 0.0033566816709935665, 0.002821251517161727, 0.0034662722609937191, 0.0028121485374867916, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[32] = { 378, 684, -1168, -263, -1141, 956, 1151, 614, -130, -1079, -631, 477, -760, 471, -779, -182, 1118, 16, -2139, 791, 242, -267, -685, -254, 993, -984, 601, 2059, -1474, 769, 136, 940, };
const TfArray<1, int> tensor_dimension11 = { 1, { 32 } };
const TfArray<32, float> quant11_scale = { 32, { 5.1986946346005425e-05, 5.1584418542915955e-05, 4.5443739509209991e-05, 5.2607683755923063e-05, 3.1154300813795999e-05, 8.2877872046083212e-05, 4.0814175008563325e-05, 9.5909927040338516e-05, 5.521048660739325e-05, 5.7019584346562624e-05, 6.715936615364626e-05, 3.7824473110958934e-05, 3.7464185879798606e-05, 4.1245231841458008e-05, 4.2334020690759644e-05, 5.725266964873299e-05, 4.3716030631912872e-05, 6.5056636231020093e-05, 3.9793121686670929e-05, 4.8225021600956097e-05, 3.1585921533405781e-05, 4.1204661101801321e-05, 6.519717862829566e-05, 3.934026972274296e-05, 4.8745590902399272e-05, 5.9723141021095216e-05, 5.563909508055076e-05, 4.2936040699714795e-05, 6.1956910940352827e-05, 5.2074054110562429e-05, 6.3979707192629576e-05, 5.1906034059356898e-05, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[64*1*3*32] = { 
  /* [0][0][][] */ -32,43,-24,40,26,-18,-121,74,67,-54,-55,27,-5,-115,-58,-122,69,-20,-21,1,-74,27,-67,-68,-69,-32,3,-82,-110,82,-54,-88, 11,-76,-94,49,-56,19,-45,3,29,-48,-108,-88,101,-59,49,74,86,72,-104,-51,-91,-119,100,20,-17,-87,-70,-38,58,75,-127,-8, -59,-89,-87,112,105,-90,-88,-83,103,17,-95,-39,42,47,-81,-57,-90,-77,-82,-40,60,40,86,61,-27,-25,-16,-53,-79,88,7,81, 
  /* [1][0][][] */ 4,-30,-17,-14,-5,127,51,35,20,-2,-25,15,22,13,-6,-17,20,1,-43,26,-1,-23,-36,-18,8,5,54,56,-17,56,34,-21, 7,7,1,-27,-34,-3,35,3,5,4,-24,2,-2,32,-48,-42,33,-19,-32,51,4,-14,-36,25,20,-5,23,85,-46,33,-6,-20, -16,24,3,-16,20,27,-15,0,-23,-25,-34,5,-47,30,-30,18,-2,-26,25,-14,-5,12,16,12,13,-21,-17,29,6,35,21,37, 
  /* [2][0][][] */ -63,85,9,89,-33,-4,-38,113,-1,47,116,91,-20,-23,-9,79,23,46,100,37,-55,45,108,-17,-20,113,-115,-104,9,-99,18,37, 89,66,49,-1,-20,89,-66,67,-10,4,90,-46,55,25,95,60,-37,55,-35,9,61,10,0,-44,-108,16,-12,-110,57,-73,-50,49, -52,-38,54,84,26,107,50,-2,44,52,42,-49,8,-62,127,-86,62,40,7,15,75,-70,33,43,-49,65,-88,-123,20,52,-9,38, 
  /* [3][0][][] */ -15,-8,57,112,22,85,32,92,120,-16,69,105,23,19,47,50,-8,63,13,26,-60,86,-15,21,-35,35,-49,-90,-54,-1,-87,-21, -83,37,-43,11,-52,29,-47,-84,-46,3,-9,-13,-63,45,25,-7,37,-19,-45,47,43,-13,-23,7,21,-42,44,13,22,85,-25,-27, -32,45,10,26,11,25,92,-15,-31,68,10,61,-65,127,-54,-14,105,-12,-26,85,-63,11,23,50,100,-44,13,2,27,56,42,62, 
  /* [4][0][][] */ -67,-5,31,11,1,45,9,-14,9,24,-60,57,-69,-51,-44,68,34,-58,-52,58,1,18,-76,7,-18,-61,-2,-27,-26,77,-47,74, -15,-6,52,16,-18,96,-49,-45,-23,-5,-33,-41,16,13,-12,-40,-53,-40,11,-23,-22,16,-46,33,-14,0,10,-21,-62,-35,17,-4, -95,-3,-9,-62,-15,-41,84,115,-61,0,-25,-53,-63,78,-59,-35,56,-44,2,81,31,50,-127,66,41,-3,54,81,-36,105,51,-12, 
  /* [5][0][][] */ -28,37,-55,30,-5,127,-47,5,48,-25,-18,-46,35,47,-24,42,-30,-95,26,3,-56,-90,14,7,37,-42,-17,-34,40,-84,-40,-72, -63,-22,-47,-19,-22,-40,-78,-59,33,8,-8,44,-56,-16,17,-75,-48,-46,20,9,-39,17,42,-18,-11,-78,30,-49,25,12,39,-1, 37,-79,22,48,-64,4,58,-26,-11,10,-31,12,20,-22,-11,1,16,-77,5,-40,-66,-54,-62,44,-60,-52,-61,38,0,-70,-90,-76, 
  /* [6][0][][] */ -6,13,-38,42,23,-41,-28,109,92,64,45,33,10,-51,21,-20,51,0,52,11,37,50,54,74,49,98,-71,-75,29,-84,-5,6, 38,103,-32,-9,-28,-92,58,31,-45,77,33,60,-51,10,54,14,39,54,52,-19,-10,23,14,9,32,87,-75,-26,73,4,-42,50, -5,95,74,81,54,-45,23,26,25,11,13,102,-5,55,127,77,102,56,21,37,66,100,106,80,46,28,-62,-99,94,51,36,32, 
  /* [7][0][][] */ 36,0,-34,-3,26,76,-4,15,-6,-9,-11,-17,-4,14,-40,-34,9,8,14,16,36,-11,9,-36,20,4,5,57,3,52,4,22, 11,-39,-20,19,-9,10,30,24,7,-5,-22,-9,-1,-47,-8,-32,-39,8,-17,4,-33,-24,-28,-10,-17,16,12,-4,-4,32,-7,29, -21,-14,29,-31,22,127,-22,38,-22,-28,3,2,1,1,-35,25,30,30,4,17,22,-17,-14,-39,6,-29,-49,-14,2,5,3,4, 
  /* [8][0][][] */ -4,40,48,-22,46,-82,56,12,-32,-20,24,-1,0,18,-48,18,-13,-35,41,29,25,-7,-22,-1,96,-43,25,26,-4,-15,39,-7, -68,75,47,-27,-35,-127,20,70,36,12,-13,26,-81,67,-14,1,66,-15,40,-30,-16,76,70,50,26,-13,-24,22,55,-7,-43,63, 51,86,36,58,-55,24,35,53,10,42,86,77,-38,41,17,34,24,62,23,-26,-31,19,0,-6,-44,41,-13,-78,-11,-40,-63,59, 
  /* [9][0][][] */ 35,-7,-75,-13,-13,109,105,27,12,-71,15,-18,22,76,8,-86,27,-62,6,127,70,-58,-16,17,36,37,-18,-38,-49,53,48,-22, -50,-15,-96,-67,26,8,51,-73,8,-28,-30,32,-28,51,11,-48,63,-43,28,86,2,64,-4,62,60,-22,56,-20,-72,68,32,-16, -13,-28,-113,-15,64,51,-29,-88,-50,11,-28,-20,-64,35,-72,7,-3,4,21,29,-26,-39,-111,-8,14,-61,39,39,-26,21,-12,19, 
  /* [10][0][][] */ -94,-127,-116,-120,-5,-64,58,69,67,-17,-117,-93,50,-94,86,103,-16,-109,89,-96,-111,-6,52,71,-122,-48,-30,77,-47,77,-93,75, -10,43,-111,-97,-91,-97,-75,-103,-25,41,-83,40,86,-59,-45,-73,-47,-76,-82,-42,-67,-62,-46,7,-49,80,94,37,59,13,1,-35, 1,40,-105,69,55,32,-103,18,-44,90,-112,-60,-61,15,-42,-6,31,28,97,-101,-31,-53,-90,23,70,-80,-46,-74,49,30,11,-108, 
  /* [11][0][][] */ 86,-14,-1,127,-47,34,-85,73,75,-68,49,45,121,-29,17,-69,0,29,55,65,38,-28,-7,25,33,50,24,-6,-4,-26,-88,22, 8,-60,14,-106,22,125,-57,23,-33,-22,2,-39,-1,-63,-71,-79,4,19,4,-18,52,-3,32,-2,-45,-69,-11,84,-14,16,-21,-32, -47,-67,-64,-53,72,1,-67,-38,-42,-25,-3,-68,-69,-65,26,24,-76,-87,0,-86,-92,-57,18,-60,8,-55,-43,32,-75,-54,-36,-83, 
  /* [12][0][][] */ -1,66,9,46,21,-64,57,-18,42,-50,-51,-56,-29,-6,-67,-31,23,-37,-55,23,1,67,-28,22,105,-42,44,42,50,49,0,56, 40,55,34,1,-6,-5,-29,103,-42,19,34,35,-84,-19,-92,25,34,-4,38,-15,-21,-2,-43,83,8,-21,-57,-55,15,27,-13,118, -38,85,34,127,-27,-5,61,39,16,13,60,8,3,69,70,78,48,8,76,72,-44,99,16,94,80,43,29,-82,-3,-34,13,37, 
  /* [13][0][][] */ -2,-17,34,1,-51,127,25,-53,10,1,-47,3,32,25,-23,-10,118,50,-66,-17,33,-7,34,36,106,-33,92,126,-33,-8,47,-14, 73,1,44,-48,-24,127,-18,-8,-63,-26,-4,19,13,93,-42,-43,45,12,-1,44,-2,-20,39,-4,38,25,110,44,-68,-21,-2,24, 19,-41,4,4,0,-49,-101,-38,8,7,-88,-102,-78,-39,-108,-19,-65,-77,-35,-22,-25,-33,27,-17,-63,-53,55,25,-4,22,-25,-90, 
  /* [14][0][][] */ 35,14,22,-39,62,127,43,-41,-56,-65,-1,-25,-65,104,-55,-48,67,-51,-35,93,33,-64,-127,31,114,-99,61,11,35,73,56,1, 39,-71,-43,-11,22,23,21,12,-69,-75,3,5,-32,60,-15,-15,-57,-3,-45,-6,54,-8,-49,-30,60,-8,65,-2,-32,54,55,-33, -40,-84,-41,-36,6,10,-22,-83,-1,-50,4,-15,-22,-22,-60,4,17,-64,-36,29,9,-61,-100,-107,-91,-11,33,-36,-19,-32,-83,19, 
  /* [15][0][][] */ 4,-84,-39,27,-5,50,-54,-88,3,46,9,21,65,37,53,32,39,-64,-33,-54,8,-28,26,-55,-30,-67,41,127,-69,-68,-52,48, 34,-42,-87,-93,35,58,38,16,40,-71,-58,15,26,-75,14,37,5,-18,-18,0,-64,-38,-8,-55,-56,28,12,74,-78,18,3,-35, -39,-54,18,-40,56,-56,39,-30,1,-10,38,-44,-63,0,37,30,23,42,-4,-41,-21,-89,19,23,-38,25,-64,-14,-34,19,-78,16, 
  /* [16][0][][] */ -18,-49,-53,-12,46,-126,50,-98,-56,-39,-2,-23,30,-9,-4,22,-35,43,-22,-31,6,4,5,16,74,-47,-53,54,43,17,45,65, 44,30,-55,63,17,-66,5,86,-48,-19,5,24,-103,-52,-60,-44,-35,16,-59,-29,-5,7,-96,71,18,-50,26,-12,40,-90,-61,73, 29,82,-53,54,59,-114,-16,37,127,-69,-4,46,-32,-84,-7,34,39,70,59,11,73,7,68,-67,53,-53,31,-88,-49,-46,-118,50, 
  /* [17][0][][] */ 8,-26,7,33,41,-127,52,-45,-1,-33,-84,-29,21,-15,-50,-54,46,30,-26,29,43,-8,-45,-10,27,-50,-43,-56,-1,1,-7,6, -82,66,12,4,54,-17,29,110,-38,45,-33,54,-81,-46,-73,52,37,35,31,33,53,16,-66,81,53,13,-94,-53,-47,-7,-71,67, 49,63,-43,67,-42,-73,-4,26,46,-27,63,67,-29,-30,2,57,-78,50,78,-1,-10,94,82,24,14,81,-15,-91,92,-48,-21,61, 
  /* [18][0][][] */ -16,26,-63,12,-37,-20,5,36,46,52,-34,54,-5,-54,-110,48,-38,-18,37,-43,-42,8,-98,-44,-9,-13,-29,27,-5,-42,70,49, -104,51,-30,29,-32,41,-3,-47,-85,-77,-68,-40,-35,92,-126,-25,-22,-66,-46,77,-41,55,-42,39,97,-14,74,54,-93,87,90,-9, -65,50,8,-17,63,29,13,63,-88,24,10,-43,-105,-5,-45,6,0,-21,-95,123,-12,-47,2,116,127,-11,-16,-63,-99,45,88,42, 
  /* [19][0][][] */ -23,47,-69,0,34,-80,-55,12,-68,-68,-68,-83,-56,-34,-11,-7,-26,54,46,-49,-45,12,-4,92,-48,-27,81,-78,-13,60,-1,-41, 14,-16,-113,-77,-53,-20,-68,60,39,34,34,35,-93,-107,-78,-113,-123,-126,40,-89,17,-96,106,-27,-10,-126,10,-63,-79,-35,-28,-121, 11,-107,4,85,-43,25,40,-32,-17,-53,-127,-82,-77,-17,8,67,70,-96,102,-97,-19,75,56,59,-80,-123,-108,-86,-59,87,-3,-107, 
  /* [20][0][][] */ -47,8,-12,-19,47,127,7,-27,-35,58,20,40,58,42,6,16,40,35,-44,20,-73,5,1,3,79,-52,14,64,12,2,61,-9, -9,-15,-13,-38,-45,80,-26,-90,29,2,-71,49,-48,52,-8,57,-22,-29,-62,61,28,-12,-72,43,39,-54,64,56,-61,-15,73,26, -60,24,-7,-8,8,-9,75,78,14,-24,-47,61,7,71,13,44,11,29,-6,87,55,65,26,18,59,-30,14,-11,-50,-4,62,66, 
  /* [21][0][][] */ 26,76,11,28,32,-17,64,127,-38,95,-5,51,-55,29,42,-41,45,82,69,-88,28,-10,-8,30,-2,61,-100,-13,55,-19,-67,107, 54,15,54,19,-29,15,17,35,18,-13,40,61,-11,-28,56,-37,-50,28,-2,37,-4,-39,59,24,9,-3,-17,-52,55,-86,30,48, 37,42,76,-16,-33,14,-61,20,-25,51,36,-12,-27,-55,107,-44,-46,2,30,-43,47,-41,100,16,34,76,-121,-72,42,27,-30,-35, 
  /* [22][0][][] */ 8,2,21,27,16,-8,-7,-53,-99,12,-28,39,-1,-52,2,-96,-9,-68,-90,63,-83,-53,43,-119,-10,16,-120,-103,-45,-41,-38,0, -80,-73,-113,10,68,-37,24,2,-38,54,-75,-24,-38,-36,60,-19,-31,3,-39,26,12,53,-77,7,-116,-20,20,2,-127,-111,-47,-28, 1,-94,4,69,-40,16,58,7,48,-1,62,22,-106,-11,-51,35,-115,-90,-19,-13,-97,-111,-102,-74,15,64,-66,60,-61,-37,21,-90, 
  /* [23][0][][] */ -59,89,-10,-48,15,0,56,-90,1,-14,-71,13,41,-36,-86,0,-29,-10,-77,32,-34,37,-55,37,10,-36,30,-11,-17,26,64,68, 75,-43,72,-53,14,50,50,9,-62,1,34,-47,-3,65,-58,63,36,48,49,23,-22,-42,6,61,81,-61,67,-53,-33,55,35,-3, 25,16,-44,-90,-39,-42,75,-15,-69,-27,-6,28,-6,101,-76,25,35,40,34,127,36,-28,-66,-15,76,-67,80,17,-18,93,74,65, 
  /* [24][0][][] */ -43,-103,-41,-23,46,-68,-77,-31,-40,-34,-61,-84,60,44,64,13,-69,39,97,-42,15,40,36,3,51,-39,-117,-34,-79,42,-83,-127, -55,26,-26,-12,-53,-68,41,-41,-17,28,-57,-42,57,-100,-83,-91,12,-95,-63,-116,11,-3,-96,-73,-6,-53,-46,-39,-42,-32,-73,2, 39,-117,1,-42,38,11,-29,31,15,-102,26,-55,-85,5,4,-59,-50,-30,8,-54,-62,-77,-56,3,-39,-105,-90,-1,-37,-95,-43,-50, 
  /* [25][0][][] */ 67,16,-3,-38,-19,-36,42,127,64,21,39,-7,11,-26,47,40,-69,17,70,-23,-41,35,52,-17,-86,60,-25,-100,-42,-72,12,40, 23,51,-2,32,-33,-39,-84,-15,42,46,-11,-44,2,7,13,48,-13,1,-27,-43,22,48,10,2,-120,44,-24,-106,0,-23,-14,-30, -30,16,-4,-44,-28,-50,-33,44,15,11,-18,-41,36,-94,-6,-48,-22,-45,-14,-96,18,-59,39,-14,-95,-5,-82,-56,52,-65,0,38, 
  /* [26][0][][] */ 7,-38,3,-6,16,127,26,-48,-42,-58,20,7,26,39,-5,-14,32,-10,-46,64,47,0,-39,48,55,-9,37,70,-5,51,44,-54, 13,-1,-6,19,-29,19,2,-4,36,-41,-25,3,11,33,-25,-13,-6,-53,-33,-11,23,10,-24,-28,24,-64,36,37,8,-27,5,-59, -22,-34,-31,-36,-13,21,-6,-32,-65,-35,-42,-17,7,-17,-42,1,22,-18,-32,13,-18,-25,-10,3,6,-5,12,38,-2,-20,-20,-17, 
  /* [27][0][][] */ -42,-46,-45,-80,36,26,-20,-82,-12,-64,15,-9,-61,-16,68,-43,-70,-58,36,-18,63,34,18,-9,47,32,51,-14,-78,9,-78,51, -89,8,23,46,67,3,-56,46,-106,-15,53,14,-70,43,-60,-80,50,-103,33,-79,-16,-112,50,-45,53,-77,-18,-115,-54,26,-100,15, 50,-40,-20,31,2,61,-22,-90,59,-108,37,65,-46,-59,-38,-9,-46,-101,-20,-80,-49,-95,-91,-127,43,51,-15,49,-7,-34,-33,-81, 
  /* [28][0][][] */ -5,69,-49,-64,32,27,-39,0,36,-61,-36,39,68,-3,18,-7,61,-15,10,-17,-11,27,-57,-13,22,-60,14,-127,-49,30,-26,-62, -35,41,33,17,41,9,-2,-20,-20,55,34,0,-38,25,34,44,21,-2,-1,-92,-30,-3,26,59,50,9,-41,42,-42,-74,24,-10, -31,12,26,-5,-52,-35,-15,59,-23,39,-3,38,-11,-31,72,-20,-31,22,53,-36,-60,0,-21,-17,-43,66,-53,-62,68,-95,-15,76, 
  /* [29][0][][] */ -21,-63,-58,102,-26,48,49,30,-2,35,-69,14,51,-50,4,-56,-9,-15,-53,1,63,-117,-44,-4,64,-110,-104,-53,-9,-83,-107,-29, -33,52,-29,-54,-57,83,13,45,-91,-36,-58,-39,-106,-123,-14,-69,-52,28,40,-31,-96,23,40,5,37,-75,6,-53,-31,32,-127,-105, 93,-17,-59,77,-59,87,17,50,-25,-57,-40,1,4,-30,19,-45,-50,-114,30,50,-60,-92,-86,54,76,-41,-71,59,-59,-78,-66,46, 
  /* [30][0][][] */ -4,2,-12,4,22,127,5,34,-19,6,-28,25,72,39,44,-20,37,20,-30,46,3,-5,27,44,-5,41,66,89,44,79,72,-42, -15,-90,-9,-3,-19,75,14,-2,-22,-49,2,-61,-36,29,-17,-69,66,-61,-82,6,-7,-61,-17,-28,4,-26,13,107,6,56,48,-44, -48,-31,-5,-13,-31,64,-24,-12,2,-13,-47,-55,-17,-38,-27,43,5,-11,-77,-8,-3,-29,-53,-69,-37,-60,29,21,-40,34,8,-6, 
  /* [31][0][][] */ -9,41,30,63,-16,-27,39,127,43,77,61,-17,24,-44,55,64,16,11,91,-72,37,-23,44,13,31,66,-88,5,66,-95,-59,-34, -6,73,64,80,27,14,29,37,1,20,44,62,6,29,79,-10,34,49,-53,-80,-18,-13,-6,-61,-109,-4,-26,-24,26,-86,-21,-70, -24,-52,73,9,-2,-8,-32,85,-26,-52,56,-31,84,-32,20,-26,-40,53,20,-44,32,-42,89,13,-5,36,-31,-19,-31,17,0,5, 
  /* [32][0][][] */ 11,6,-49,36,-86,116,118,-52,76,-102,-126,54,106,98,-86,-51,9,-4,-6,47,73,6,-83,70,1,37,95,82,-24,113,47,47, -123,71,95,-99,42,-52,-4,22,-41,-27,-50,-31,71,-25,-84,-59,-15,50,-89,13,-11,34,-82,93,42,-120,7,58,12,123,-81,50, -29,5,107,-103,21,-77,127,4,-59,4,-76,29,-9,109,-123,100,95,8,-52,-53,19,-66,-105,8,68,4,34,-83,19,-38,51,-28, 
  /* [33][0][][] */ 33,26,-6,-8,46,122,45,-50,-6,-45,34,25,79,14,19,-10,78,-29,38,41,12,36,7,65,61,-3,27,78,-42,127,44,2, 6,14,22,-31,19,8,11,-42,34,-36,-25,-50,31,37,-16,15,46,-10,3,90,1,-23,-49,-5,102,-57,8,97,-33,52,28,-1, 13,-25,-31,-41,-41,28,-16,65,-53,-59,-74,29,-9,-16,-63,-32,-17,2,-57,10,-45,0,-57,-6,-20,4,9,-22,-55,18,22,-23, 
  /* [34][0][][] */ 9,-83,-18,-13,-56,59,-30,19,7,11,-37,-73,48,37,-21,-56,-12,-37,-9,62,5,0,-50,-15,10,4,127,-31,1,40,8,-57, -3,-21,-68,-54,8,69,27,-26,20,-61,-34,20,-16,-31,-88,-45,14,12,-25,101,-27,-17,-9,-26,57,-3,109,101,-12,-12,9,-96, -48,-37,-22,-5,42,69,-31,31,-8,6,-56,-6,-34,-76,27,69,-17,-22,11,82,7,-82,-13,14,-70,-34,77,50,25,64,-19,-74, 
  /* [35][0][][] */ -105,104,35,-73,-4,56,23,64,-42,-35,-79,-95,61,-87,-48,-104,56,-64,42,5,-96,-72,-73,-75,-6,-19,-101,-42,-92,-63,-33,-12, 4,-108,-52,-104,83,28,9,37,-107,87,66,-89,-47,19,71,-39,22,-109,-31,76,74,-118,-77,-120,-103,-55,38,77,-92,-123,-18,-1, -73,-53,-65,16,-99,-18,-127,11,-76,69,-42,-35,-81,16,-41,-62,-13,60,-60,-79,94,-87,-109,9,16,-29,4,-28,12,-50,-104,33, 
  /* [36][0][][] */ 12,27,-8,-58,91,-57,34,-53,-118,-105,-49,37,17,-54,30,-28,-58,-86,-72,71,-76,38,48,43,-123,-81,-30,-26,-9,53,2,32, -42,58,8,46,-28,-91,-51,9,-115,-74,-105,-23,50,-81,-20,33,-86,-93,55,-69,-108,-81,38,18,-105,-45,-50,62,3,-79,60,-127, 47,-67,35,-50,69,5,49,33,-60,37,-112,-44,-94,12,-1,-3,-6,-69,6,-68,11,-66,44,-71,-56,3,-66,-27,47,58,-118,-78, 
  /* [37][0][][] */ 46,-20,70,-18,-14,68,26,11,-31,33,-38,-79,20,31,-8,42,12,36,-65,94,-39,-58,23,-11,24,-56,85,35,-30,-12,-30,9, -56,39,16,-18,0,16,6,-82,12,-16,-5,41,49,14,-92,39,-6,-61,-18,1,53,37,-79,76,50,35,44,-41,-58,9,8,-46, 32,0,35,21,35,16,77,-22,5,-14,33,59,-27,51,-89,77,74,40,-40,58,43,65,-89,-8,127,-74,-47,60,-63,12,72,63, 
  /* [38][0][][] */ 27,45,24,55,36,0,22,127,79,19,109,56,31,-39,90,-1,10,-25,39,-3,-33,51,63,-47,-5,67,-107,-116,43,-26,16,61, 37,-19,70,-28,-51,85,19,-3,36,73,41,46,92,-8,-3,-19,3,-3,41,-27,29,14,-8,6,-38,41,-14,-47,-4,66,6,-37, 63,-74,-68,50,25,57,-21,19,-22,12,6,6,73,67,19,-67,-1,-15,-53,-49,-10,3,-13,-29,18,-27,-1,2,27,-5,54,-34, 
  /* [39][0][][] */ 80,46,-3,-10,42,63,-54,57,24,-16,7,-29,48,-16,14,-38,-61,-12,16,9,-15,-19,43,-20,-127,18,-58,-20,-18,-13,-16,-7, -9,-14,-27,-86,-16,127,-18,-26,-60,-34,-46,-76,-2,-1,23,-56,40,-58,-61,65,41,-46,20,-3,34,-59,17,42,-44,61,8,-15, -40,-34,-22,-49,-18,44,41,64,-12,-17,-7,-12,-26,24,2,-16,1,-27,-66,14,-23,-38,-83,58,-2,-85,-7,-9,-10,57,42,-24, 
  /* [40][0][][] */ 16,82,-36,-20,-15,-45,-29,100,-51,-34,-50,31,6,45,-82,10,45,16,-35,26,25,23,-75,18,58,35,-3,60,1,53,-4,-41, -32,6,-64,4,47,-68,-24,104,45,5,43,58,-81,16,18,45,75,2,-9,-28,13,-11,-7,72,18,-5,-4,-54,43,-123,-10,79, 62,9,3,-8,47,6,-28,47,90,82,68,66,17,-66,61,20,2,5,13,-60,2,64,53,15,-35,67,-28,-127,57,-82,29,78, 
  /* [41][0][][] */ -26,-75,-18,-42,24,-49,-15,-60,-29,-29,-21,-53,-48,-95,-6,-39,-44,-42,-1,-42,-6,-36,-30,-61,-49,-10,-19,-36,-46,-28,-20,-26, -13,6,6,76,4,95,29,13,4,-33,7,-8,84,42,16,-32,-6,-30,-2,77,38,-22,22,5,-27,-23,127,-20,-10,83,27,-14, -74,10,-19,-39,-9,103,12,51,-8,-31,13,11,-17,43,13,-30,41,19,11,41,27,-42,-29,22,84,-9,49,92,-32,116,-20,28, 
  /* [42][0][][] */ 101,29,-2,-29,11,127,-1,30,37,-33,74,-81,45,-78,21,6,-95,-41,-57,-41,-74,-84,-76,-61,11,-24,-34,99,42,62,42,-64, 14,73,-86,-8,-41,24,-82,57,-24,-12,-80,3,-49,11,27,-44,-43,-67,36,-61,42,-79,-37,-33,-20,-19,19,-45,-27,-36,-31,-19, 17,75,-82,-95,72,-112,-76,82,-21,22,75,55,-91,-55,-75,56,32,-16,31,-13,22,-57,23,-66,21,61,31,32,-15,14,-100,-78, 
  /* [43][0][][] */ -82,-35,-1,-28,-33,-72,-44,-27,-31,24,-12,23,-116,5,-27,35,78,-45,61,3,17,-22,-79,94,66,-40,-13,69,44,-15,52,-6, -70,30,60,-14,70,-127,50,14,-49,-8,-5,-25,-79,69,25,-15,20,19,45,83,14,79,-29,-18,78,-67,-80,-42,44,34,31,62, -37,101,-13,45,18,-16,28,72,50,49,44,34,-23,-22,-26,-7,45,68,-2,-14,1,39,58,42,58,-22,-101,-70,21,96,-51,84, 
  /* [44][0][][] */ -2,-88,9,-58,-72,28,-52,-71,22,38,-6,26,-71,-98,26,-112,-108,-71,4,-127,-65,-122,-97,-114,-96,-104,48,17,36,-84,29,-35, -70,20,58,-37,78,-98,26,-109,-115,11,13,-31,-81,18,33,-74,-44,-116,-17,15,-69,-75,-13,44,-30,-46,-8,17,-28,-41,-51,-53, -84,-34,29,-4,61,-58,-94,36,-116,12,31,7,-65,7,-17,42,16,6,-101,-75,-23,-54,-50,-61,-61,-14,-73,51,27,43,40,24, 
  /* [45][0][][] */ -10,44,32,41,47,-18,2,34,37,78,-2,13,-42,-24,72,-26,21,25,21,-97,-58,-27,96,20,-24,15,-9,-36,80,-30,-117,50, -14,-27,37,-9,19,-46,20,18,78,44,-26,-1,21,-115,-19,-2,-90,14,-17,-2,-63,42,27,-63,-127,-22,-14,-70,-7,-79,-57,7, -52,-10,-66,-24,-4,7,29,-5,65,-49,-6,39,13,3,27,11,57,42,26,-20,12,65,59,-37,-17,50,-19,-9,7,-50,7,-7, 
  /* [46][0][][] */ -5,18,-29,-53,36,90,74,-64,27,-4,30,-62,8,108,-50,-18,66,36,-58,6,-21,-14,-44,79,6,22,62,127,-51,108,81,-13, 28,-38,-28,17,-37,52,88,-5,-45,16,-3,35,-49,96,-56,-26,62,31,-5,59,-14,38,-55,98,101,15,92,32,-57,10,5,24, -74,-43,52,-56,-21,36,20,-87,-32,-29,-50,-13,-61,68,-33,40,72,-16,49,26,52,44,-78,92,29,-1,50,-63,-3,95,74,46, 
  /* [47][0][][] */ 7,50,19,69,-27,-26,-17,127,21,6,43,69,5,22,20,9,-23,32,52,-26,-12,51,47,13,-2,-8,-10,-36,-15,-51,-13,-19, 45,-21,-28,-33,-35,18,9,95,5,47,2,8,22,-9,40,-40,-47,52,-17,-49,-5,37,41,39,-2,63,-24,2,43,-56,-44,41, -11,-3,35,4,-19,34,-48,25,17,11,-12,-20,-20,-5,83,27,31,64,45,25,-8,15,20,-23,-56,-12,-35,-27,36,10,-27,41, 
  /* [48][0][][] */ -70,39,-4,37,26,-80,-31,-66,-21,-30,-19,37,-15,34,29,-19,37,38,43,-43,43,24,-20,67,21,-61,3,-59,-67,39,-42,-32, 22,78,51,14,-22,-24,39,127,-46,20,-26,47,-66,-7,-6,-34,39,1,-21,-66,-2,6,71,30,59,57,-47,7,-3,-28,-41,90, 17,47,7,10,16,-60,-1,124,93,-3,42,26,-59,-1,67,83,-17,75,86,9,-23,21,58,-23,-57,97,-89,-73,27,-49,-58,77, 
  /* [49][0][][] */ -82,-9,-103,59,89,-102,-95,88,-56,0,-55,6,-27,-77,-36,-7,90,-113,37,-47,-9,91,-73,-75,35,-64,-35,-56,-81,12,45,29, 45,-43,-98,4,36,12,-28,-8,-6,-84,-13,67,38,18,75,-6,-106,-94,70,29,63,-99,21,48,-75,-103,-86,-28,-104,-73,-81,-79, 97,-127,22,-34,5,75,30,98,-109,-88,16,-78,10,22,-14,59,-79,-81,-13,33,43,28,-77,35,-25,-117,-60,19,40,-80,53,-43, 
  /* [50][0][][] */ -79,-127,-89,-36,-58,12,-33,38,55,-30,-122,-73,-27,-56,-91,-125,-38,-102,76,-60,122,-10,33,83,107,-9,-102,51,-107,-7,44,-33, 97,-48,56,-24,-23,-78,22,-47,-11,46,34,-96,2,-3,-18,-82,53,-12,-97,-72,-58,-14,-10,42,-38,-106,64,-66,81,40,-124,-42, -16,-75,63,-23,-70,-75,-32,-106,41,68,83,-62,-39,-10,17,86,26,-89,13,74,-61,-16,35,-52,-71,-123,-19,77,-7,11,-122,-96, 
  /* [51][0][][] */ 13,-27,-70,44,34,-14,30,9,-78,-54,-16,-4,-49,52,-86,-75,27,39,-4,-32,-8,-31,-52,-8,-59,45,16,34,-62,22,-61,-53, -9,40,-41,-69,-15,-87,-72,2,50,57,42,39,-92,29,11,42,25,-8,15,-5,24,-46,26,38,0,25,-95,37,50,-106,-77,64, 90,39,15,-15,-24,-67,30,34,-20,17,62,-3,-20,-59,44,8,-32,61,56,-86,49,-33,63,-13,-94,23,-24,-30,54,-127,-77,42, 
  /* [52][0][][] */ 70,26,-54,40,0,27,3,7,37,-14,23,-50,59,-53,-1,32,40,-1,-51,62,94,-15,39,-28,-4,34,-11,55,32,39,-38,53, -75,12,-5,49,6,-37,3,-36,24,21,-8,-21,-4,-36,-89,-37,-14,-15,-61,-40,-47,-39,-44,-25,-20,-30,-40,77,-64,3,-48,-4, -40,-8,50,-127,12,5,-19,-69,-5,25,-25,8,-7,14,-11,-61,-17,-70,-34,-4,2,-38,43,-41,51,-26,55,-17,-45,27,-45,-39, 
  /* [53][0][][] */ 78,74,70,43,66,-44,-21,127,39,105,82,71,4,51,13,20,-1,22,59,-73,-22,92,53,44,-26,72,-95,-98,63,-85,-54,42, 10,-11,-6,-18,37,-70,16,103,81,70,71,85,-20,19,-14,71,13,-16,20,13,-11,15,92,21,-56,91,-62,-63,40,-72,48,11, 78,-6,-35,-20,-57,-42,14,67,67,-14,-6,40,29,-12,73,45,20,65,58,-42,55,7,55,31,-24,68,-49,-52,8,73,16,-16, 
  /* [54][0][][] */ -29,39,-31,82,95,-2,-74,89,36,37,115,-3,-56,-90,-30,-16,-75,89,96,-19,-6,-57,88,-63,-9,-54,-107,-59,90,-41,40,-97, -20,25,-86,-49,-45,-70,8,127,81,-76,94,48,18,73,107,-55,47,64,6,-105,-82,-4,64,-110,-60,5,-102,-11,38,-9,41,54, 56,41,19,-15,-72,-123,-92,115,-10,72,-9,20,74,-96,90,-85,-32,90,96,16,41,57,19,-55,-115,99,-97,-84,-27,-92,-66,63, 
  /* [55][0][][] */ -26,-10,-50,14,-18,18,6,-41,-22,-49,68,46,-59,-45,46,23,-59,59,32,-84,18,61,9,21,-60,-26,-5,-31,-37,-53,-4,-58, -24,-20,-1,-40,-43,23,-53,52,-4,33,33,6,-26,-9,73,-22,8,-16,50,16,55,57,21,0,-37,45,-77,-51,12,-96,46,48, 115,11,-19,11,17,-16,-34,127,-26,49,4,51,82,-36,11,35,-67,61,66,-26,-47,46,55,20,-11,89,-31,-8,45,-1,-35,32, 
  /* [56][0][][] */ 29,13,-31,-3,-11,-72,-11,-33,-17,37,-5,28,26,-1,-50,26,53,38,34,29,5,16,-54,-27,4,2,-22,-7,-34,-31,-12,-21, -40,10,-20,38,-13,-127,12,116,-13,50,38,-16,-67,55,53,14,32,-5,12,-3,-27,16,17,-1,63,32,-23,6,58,-54,-38,40, 4,17,18,14,-9,-81,37,127,-7,76,66,23,27,-10,-4,68,29,0,67,-5,1,31,44,-10,-59,21,-82,-63,75,-59,-5,48, 
  /* [57][0][][] */ -61,-21,-32,-19,26,-16,23,-8,-15,40,-10,-48,-127,-52,-43,46,-23,-54,-15,-52,-15,-17,-36,-5,-38,-76,-52,-54,-49,0,-44,-21, -46,33,-24,28,9,-67,-72,117,20,-29,-33,-19,-69,-56,31,-1,50,42,-11,-67,16,-10,12,1,-4,52,-7,-10,-22,-96,7,24, 72,40,20,62,-33,-3,-37,33,68,58,34,53,16,-53,66,-11,-21,16,-19,-50,19,0,21,-70,-116,63,-80,-39,4,-65,-12,35, 
  /* [58][0][][] */ 31,-30,12,12,-1,127,26,-16,1,39,-36,-7,36,-40,25,37,-12,26,28,27,-9,-37,13,33,-42,24,-49,42,-27,40,50,-49, 51,-31,-18,-24,-30,104,7,-35,-77,27,-3,-3,27,43,-21,-19,50,41,-29,33,-8,-15,-20,36,53,-41,43,66,6,43,36,-32, 2,-2,26,-14,39,-9,-36,100,31,-49,-13,4,11,-41,22,-34,13,-21,-58,17,46,-53,22,6,-5,8,19,97,-21,4,-43,0, 
  /* [59][0][][] */ 16,-69,56,-46,-40,61,-74,-14,-41,-65,-24,-51,122,-8,64,-35,20,45,63,-39,9,-30,60,-34,-71,40,34,57,71,-29,20,-47, -2,-90,-16,25,-58,112,50,-50,7,-21,-13,-27,2,-81,-22,30,21,-34,17,64,10,-76,-10,-48,40,-7,69,127,-51,73,32,-33, -19,30,-104,-84,28,-40,-55,-55,65,-81,-54,-34,-23,-66,-111,-49,-58,-40,-51,-68,23,-42,-10,-63,-77,3,-61,19,-108,-13,-68,-87, 
  /* [60][0][][] */ -13,-11,-51,70,90,-24,29,31,-6,-104,-11,82,16,-77,-127,-92,-78,16,-20,13,-30,-80,43,-50,30,-41,-6,34,-3,-87,-8,-55, 84,-47,23,-15,-57,-72,-26,-33,66,55,-37,-31,88,-48,-106,-76,-88,-103,20,-63,-15,-69,38,-99,46,-40,-100,-28,-37,7,-35,-102, 56,11,36,24,-37,-2,-70,5,-41,72,-33,11,39,31,1,6,-36,35,71,-57,-100,-14,-93,0,-115,-35,54,-49,-86,-91,8,-84, 
  /* [61][0][][] */ 7,-10,3,0,-3,-79,-63,33,-11,-53,-72,11,-12,19,-54,28,-60,22,26,-43,15,28,-64,-1,-19,22,0,43,-72,34,9,46, -24,-5,-3,12,-21,-13,11,67,-37,-7,43,37,-16,16,-33,11,26,34,-19,28,-69,38,9,11,53,52,-94,-17,-38,-33,-71,-23, 44,-10,41,0,44,-14,60,127,1,-7,24,-2,-24,-46,73,59,-40,86,90,-51,-10,46,-12,-19,-11,21,-40,-40,56,-72,32,67, 
  /* [62][0][][] */ 8,4,9,8,-5,37,11,5,7,-3,-3,-2,-6,-3,-5,-7,9,1,-16,14,-9,-17,0,-12,4,-12,32,17,4,2,-4,-10, -12,9,-11,9,-10,35,13,34,1,-6,1,-12,8,2,-4,-4,1,-8,9,0,6,-2,-14,-3,-11,-12,9,-5,2,0,-1,13, -12,-8,-3,-12,-13,127,15,18,4,-11,-18,1,-9,8,3,-13,13,-14,-4,0,0,-11,3,8,-1,-15,-1,15,-14,33,14,0, 
  /* [63][0][][] */ 18,-28,-69,-70,-57,-28,-116,-14,-58,5,-44,37,-65,0,46,-80,29,-58,11,-27,27,32,-74,13,-62,-66,58,48,29,-52,30,-16, 36,-37,-37,44,30,-60,-62,46,35,71,30,56,-64,28,-79,-105,2,-110,-74,-62,-53,-28,31,22,-12,31,-18,47,-34,58,52,1, -47,-47,-103,4,-9,3,-74,6,-65,-93,30,-37,7,66,12,-127,-78,-42,17,14,65,-73,-31,-54,-42,-10,43,-15,17,-7,18,-10, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant12_scale = { 64, { 0.0013110785512253642, 0.0049286144785583019, 0.0018570329993963242, 0.0022526504471898079, 0.0024248145055025816, 0.0020218798890709877, 0.0025439620949327946, 0.0039781057275831699, 0.0025665913708508015, 0.0022251098416745663, 0.0012919922592118382, 0.0021564550697803497, 0.0022208979353308678, 0.0022616437636315823, 0.002136502880603075, 0.0019966613035649061, 0.0021105620544403791, 0.0023279099259525537, 0.0020196414552628994, 0.0013079699128866196, 0.0026738506276160479, 0.0021936336997896433, 0.0014014826156198978, 0.0022901971824467182, 0.001631669350899756, 0.0024800167884677649, 0.0043349186889827251, 0.0015546971699222922, 0.0026048861909657717, 0.0014584980672225356, 0.0033343115355819464, 0.0020314129069447517, 0.0015181244816631079, 0.002913198433816433, 0.00286495266482234, 0.0013106641126796603, 0.0015599853359162807, 0.0020740856416523457, 0.0025342314038425684, 0.0031704343855381012, 0.0022539452183991671, 0.0041693644598126411, 0.0016094729071483016, 0.00217862194404006, 0.001576281851157546, 0.0025437714066356421, 0.0023613069206476212, 0.0033855915535241365, 0.002500009723007679, 0.0014083524001762271, 0.001357578206807375, 0.0024616157170385122, 0.0022775314282625914, 0.0023962075356394053, 0.0015966339269652963, 0.0025367646012455225, 0.0033525563776493073, 0.0029474191833287477, 0.003119894303381443, 0.0020695761777460575, 0.001574744819663465, 0.002676329342648387, 0.01041330024600029, 0.0018022179137915373, } };
const TfArray<64, int> quant12_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[64] = { -1111, 700, -12, 793, 1456, -1009, 1458, -43, 944, 669, -1110, 355, 1093, 1829, -276, -463, -629, 1209, 1193, -1029, 1513, 1841, -1294, 1580, -775, -781, 924, -1648, -809, -647, 1838, -532, 1343, 1149, 649, -1907, -1761, 1851, 455, -10, -505, 97, 742, 2049, -1835, -446, 1743, -84, 1273, -1372, 235, -411, 850, 1006, -1009, -968, 439, -171, -463, 754, -1467, -61, -113, 106, };
const TfArray<1, int> tensor_dimension13 = { 1, { 64 } };
const TfArray<64, float> quant13_scale = { 64, { 2.6990890546585433e-05, 0.00010146432032343, 3.8230336940614507e-05, 4.6374825615203008e-05, 4.9919130105990916e-05, 4.1624003642937168e-05, 5.2371997298905626e-05, 8.1896396295633167e-05, 5.2837858675047755e-05, 4.5807853894075379e-05, 2.6597965188557282e-05, 4.4394473661668599e-05, 4.5721142669208348e-05, 4.655996963265352e-05, 4.3983720388496295e-05, 4.1104831325355917e-05, 4.3449683289509267e-05, 4.7924175305524841e-05, 4.1577921365387738e-05, 2.6926893042400479e-05, 5.5045984481694177e-05, 4.515986074693501e-05, 2.8852018658653833e-05, 4.7147794248303398e-05, 3.3590822567930445e-05, 5.105556920170784e-05, 8.9242028479930013e-05, 3.2006213587010279e-05, 5.3626226872438565e-05, 3.0025783416931517e-05, 6.8642744736280292e-05, 4.1820258047664538e-05, 3.1253301131073385e-05, 5.9973383031319827e-05, 5.8980160247301683e-05, 2.69823576672934e-05, 3.2115080102812499e-05, 4.2698749894043431e-05, 5.2171671995893121e-05, 6.526904326165095e-05, 4.6401481085922569e-05, 8.5833802586421371e-05, 3.3133870601886883e-05, 4.4850818085251376e-05, 3.2450570870423689e-05, 5.2368071919772774e-05, 4.8611713282298297e-05, 6.9698435254395008e-05, 5.1467159210005775e-05, 2.8993445084779523e-05, 2.7948168281000108e-05, 5.0676750106504187e-05, 4.6887045755283907e-05, 4.9330203182762489e-05, 3.2869556889636442e-05, 5.222382242209278e-05, 6.9018351496197283e-05, 6.0677877627313137e-05, 6.4228588598780334e-05, 4.2605915950844064e-05, 3.2418931368738413e-05, 5.5097010772442445e-05, 0.00021437635587062687, 3.7101868656463921e-05, } };
const TfArray<64, int> quant13_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[2*320] = { 
  2, -60, 17, -14, -49, -18, -9, -27, 0, -25, -20, -28, 23, -39, -5, 0, 27, 15, -27, -18, -55, 19, 8, -41, -13, -7, -117, 0, 35, -22, -49, 30, -13, -35, -24, -1, -1, -13, 16, -31, 40, -48, -15, 13, -10, 1, -38, 18, 36, 15, 10, 26, -13, 16, 13, 30, 27, 9, -41, -49, -16, 24, -26, -20, -10, -25, 34, 36, -22, -12, 21, -13, -35, 22, 9, 11, -29, -38, -45, -24, -23, -31, -2, -16, -40, 9, 16, -9, -31, 33, -31, 7, 11, 2, -16, 16, -13, -27, -8, 25, -8, -24, 31, 5, -12, 26, 18, -22, -21, 12, -29, 28, -25, -17, -10, 13, 3, 35, 17, 27, -19, -5, -22, -19, 6, 8, -18, 4, 9, -3, 29, -14, -6, -16, -16, 7, 24, 20, 4, 16, -22, 19, 26, -8, 16, -16, -13, -22, -17, -9, 4, 0, 6, 20, 10, -5, -8, -20, -5, 22, -2, -8, 16, -10, 6, -9, 11, 17, -22, -18, 0, -26, 6, -17, 26, 0, -36, -32, 16, -17, 22, -16, -18, 15, -14, 20, 15, 15, -9, 25, -19, 2, -8, 6, -37, -30, -32, -1, -62, -21, -13, 5, 23, 26, -9, -5, 0, 17, 13, -16, -20, -7, -3, -33, 19, -22, -22, 0, 18, -1, -36, -6, -5, -8, -20, 14, -19, 9, 15, -17, -7, -16, -19, -33, 19, -24, 17, -23, -23, -48, -57, -18, -24, -7, 4, -17, 7, -32, -27, -8, -4, 5, 3, -33, -7, -15, -7, 3, -28, -15, 10, -14, -37, -11, -47, -29, 1, -7, -35, -34, -2, 14, 6, -39, -10, -21, -27, -40, 16, -15, 16, -32, -1, -26, -5, 6, -48, -11, -21, -5, -48, 22, 11, 3, -50, -15, -33, 8, 0, -21, 15, -10, -30, -48, -2, -21, -24, 8, -34, -57, -22, -39, -24, -19, -46, 16, 8, 10, -17, -20, 
  -3, 56, -22, 25, 30, 4, -24, -17, -31, 42, -32, 6, 6, 5, 39, -13, -1, -22, 12, -15, 14, -26, 7, 54, -11, -18, 127, -16, -33, -8, 52, -25, 27, 33, 48, 7, -23, 28, -2, 33, -34, 43, -17, -7, -22, -23, 17, -5, -24, -3, 14, -28, -1, -29, -22, -7, -33, -33, 24, 32, 2, -12, 19, -12, 4, 40, -31, -27, -25, -16, -17, 21, -8, 5, -2, -21, 11, 12, 19, -5, 23, 20, 26, -8, 32, -17, 13, 22, -11, -7, 47, 3, -13, 28, 8, -37, -14, 1, 6, 14, 6, 0, 1, -21, -9, -33, 29, 36, -24, -22, 47, -14, -18, -18, -2, 0, -1, -11, -26, -18, -11, -11, -14, 22, -5, -7, 0, 7, -20, -2, 16, 13, 9, -12, 17, -6, 2, 20, 18, 12, 42, -15, -12, -25, 13, 5, 18, 18, 14, 11, 18, 16, -7, 15, -35, -18, 23, 5, -16, -5, 19, -18, -35, -22, -20, 14, -33, -14, 26, 9, 11, 11, 3, -4, 7, 13, 36, -15, -4, 38, -5, -24, 2, 17, 3, 13, -29, -45, 19, -4, 2, 23, -9, -22, 19, 18, 17, -7, 43, 20, 37, -11, -3, 19, 14, -13, -13, -10, 23, 17, -9, -19, 11, 52, 16, 2, 1, 37, -34, -2, 39, 4, -26, -1, -21, -8, 25, 8, -17, 16, 22, 7, 30, 12, 12, 18, -2, 26, 40, -2, 27, 13, 14, 9, 0, 43, 11, 13, 27, -2, -6, -11, -11, 18, 11, -11, 5, 41, 45, 36, 8, 4, 43, 19, 11, 40, -4, 20, 1, 30, 48, 31, 28, 8, 39, -26, 38, 53, 15, 11, -9, 31, 19, 0, -1, -12, 9, 30, 35, 53, 79, 3, 3, 15, 47, 35, 7, -3, 20, 11, 6, 43, 45, 49, 27, 7, 0, 1, 38, 55, 14, 26, 13, 5, 8, -16, 5, 28, 9, 14, 
};
const TfArray<2, int> tensor_dimension14 = { 2, { 2,320 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0051208287477493286, } };
const TfArray<1, int> quant14_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[2] = { -252, 252, };
const TfArray<1, int> tensor_dimension15 = { 1, { 2 } };
const TfArray<1, float> quant15_scale = { 1, { 0.00026307857478968799, } };
const TfArray<1, int> quant15_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,40,65 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,40,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.018457785248756409, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,40,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.018457785248756409, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.018457785248756409, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,20,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.018457785248756409, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,20,32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.020586783066391945, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,20,1,32 } };
const TfArray<1, float> quant22_scale = { 1, { 0.020586783066391945, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.020586783066391945, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,10,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.020586783066391945, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,10,64 } };
const TfArray<1, float> quant25_scale = { 1, { 0.051374215632677078, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,10,1,64 } };
const TfArray<1, float> quant26_scale = { 1, { 0.051374215632677078, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,5,1,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.051374215632677078, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,320 } };
const TfArray<1, float> quant28_scale = { 1, { 0.051374215632677078, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,2 } };
const TfArray<1, float> quant29_scale = { 1, { 0.22351352870464325, } };
const TfArray<1, int> quant29_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,2 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,2 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 18 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,3 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,4 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,5 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 24,12,13 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,6 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,7 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,14,15 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2608, (TfLiteIntArray*)&tensor_dimension0, 2600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 3120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 2600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3392, (TfLiteIntArray*)&tensor_dimension17, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension19, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension21, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension23, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension24, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension25, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension27, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension29, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
